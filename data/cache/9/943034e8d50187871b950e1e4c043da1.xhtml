
<p>
拼接字符串:
concat
var a=“hello”;
var b=“,world”;
var c=a.concat(b);
c=“hello,world”
</p>

<p>
索引找字符串,返回字符串第一个字串出现的索引
indexOf
var a=“helloworld”
var index1=a.indexOf(“o”);
index1=4;(从零开始数索引,返回第一次出现的值)
var index2=a.indexOf(“0”,5);
index2=6;(从第五个位置开始数)
</p>

<p>
索引找字符串,返回字符串最后一个字串出现的索引
lastIndexOf
var a=“helloworld”
var index1=a.lastIndexOf(“o”);
index1=6;(从零开始数索引,返回第一次出现的值)
var index2=a.lastIndexOf(“0”,4);
index2=4;(从第五个位置开始数)
</p>

<p>
返回一个字符子串,传入起始位置和结束位置
substr
var a=“hello”;
var sub_string1 = a.substr(1);
<em>sub_string1 = “ello”
var sub_string2 = a.substr(1,4);
</em>sub_string2 = “ello”
</p>

<p>
返回指定位置的字符
charAt
var a=“helloWorld”;
var get_char=a.charAt(0);
get_char=“h”;
</p>

<p>
在字符串里查找另一字符串:位置从0开始
String.prototype.InStr = function(str)
{
</p>

<p>
if(str==null)
{
str = “”;
}
</p>

<p>
return this.indexOf(str);
}
</p>

<p>
在字符串里反向查找另一字符串:位置0开始
String.prototype.InStrRev = function(str)
{
</p>

<p>
if(str==null)
{
str = “”;
}
</p>

<p>
return this.lastIndexOf(str);
}
</p>

<p>
检查一个字符串匹配一个正则表达式内容，如果么有匹配返回 null
match
var re = new RegExp(/^\w+$/);
var is_alpha1 = a.match(re);
<em>is_alpha1 = “hello”
var is_alpha2 = b.match(re);
</em>is_alpha2 = null
</p>

<p>
用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串。
replace
var result1 = a.replace(re,“Hello”);
<em>result1 = “Hello”
var result2 = b.replace(re,“Hello”);
</em>result2 = “,world”
</p>

<p>
执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。
search
var index1 = a.search(re);
<em>index1 = 0
var index2 = b.search(re);
</em>index2 = -1
</p>

<p>
提取字符串的一部分，并返回一个新字符串（与 substring 相同）。
slice
var sub_string1 = a.slice(1);
<em>sub_string1 = “ello”
var sub_string2 = a.slice(1,4);
</em>sub_string2 = “ell”
</p>

<p>
不足前补零
function pad3(num, n) { (num数字,n长度)
return (Array(n).join(0) + num).slice(-n); 
}
</p>

<p>
去零1
var a=“00123”;
alert(a.replace(/\b(0+)/gi,“”));
去零2正则表达式只留数字
var value = text.replace(/[^0][^0-9]/ig,“”); 去掉所有字符串，留下数字
return parseInt(value,“10”)+1; 将数字格式化成Int
</p>

<p>
通过将字符串划分成子串，将一个字符串做成一个字符串数组。
split
var arr1 = a.split(“”);
<em>arr1 = [h,e,l,l,o]

返回字符串的长度，所谓字符串的长度是指其包含的字符的个数。
length
var len = a.length();
</em>len = 5
</p>

<p>
将整个字符串转成小写字母。
toLowerCase
var lower_string = a.toLowerCase();
<em>lower_string = “hello”

将整个字符串转成大写字母。
toUpperCase
var upper_string = a.toUpperCase();
</em>upper_string = “HELLO”
</p>

<p>
去除左边的空格
String.prototype.LTrim = function()
{
return this.replace(/(^\s*)/g, “”);
}
</p>

<p>
去除右边的空格
String.prototype.Rtrim = function()
{
return this.replace(/(\s*$)/g, “”);
}
</p>

<p>
去除前后空格
String.prototype.Trim = function()
{
return this.replace(/(^\s*)|(\s*$)/g, “”);
}
</p>

<p>
得到左边的字符串
String.prototype.Left = function(len)
{
</p>

<p>
if(isNaN(len)||len==null)
{
len = this.length;
}
else
{
if(parseInt(len)&lt;0||parseInt(len)&gt;this.length)
{
len = this.length;
}
}
</p>

<p>
return this.substr(0,len);
}
</p>

<p>
得到右边的字符串
String.prototype.Right = function(len)
{
</p>

<p>
if(isNaN(len)||len==null)
{
len = this.length;
}
else
{
if(parseInt(len)&lt;0||parseInt(len)&gt;this.length)
{
len = this.length;
}
}
</p>

<p>
return this.substring(this.length-len,this.length);
}
</p>

<p>
得到中间的字符串,注意从0开始
String.prototype.Mid = function(start,len)
{
return this.substr(start,len);
}
</p>

<p>
计算字符串打印长度
String.prototype.LengthW = function()
{
return this.replace(/[^\x00-\xff]/g,“**”).length;
}
</p>

<p>
是否是正确的IP地址
String.prototype.isIP = function()
{
</p>

<p>
var reSpaceCheck = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
</p>

<p>
if (reSpaceCheck.test(this))
{
this.match(reSpaceCheck);
if (RegExp.$1 ⇐ 255 &amp;&amp; RegExp.$1 &gt;= 0
&amp;&amp; RegExp.$2 ⇐ 255 &amp;&amp; RegExp.$2 &gt;= 0
&amp;&amp; RegExp.$3 ⇐ 255 &amp;&amp; RegExp.$3 &gt;= 0
&amp;&amp; RegExp.$4 ⇐ 255 &amp;&amp; RegExp.$4 &gt;= 0)
{
return true;    
}
else
{
return false;
}
}
else
{
return false;
}
</p>

<p>
}
</p>

<p>
是否是正确的长日期
String.prototype.isLongDate = function()
{
var r = this.replace(/(^\s*)|(\s*$)/g, “”).match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2}) (\d{1,2}):(\d{1,2}):(\d{1,2})$/);
if(r==null)
{
return false;
}
var d = new Date(r[1], r[3]-1,r[4],r[5],r[6],r[7]);
return (d.getFullYear()==r[1]&amp;&amp;(d.getMonth()+1)==r[3]&amp;&amp;d.getDate()==r[4]&amp;&amp;d.getHours()==r[5]&amp;&amp;d.getMinutes()==r[6]&amp;&amp;d.getSeconds()==r
</p>

<p>
[7]);
</p>

<p>
}
</p>

<p>
是否是正确的短日期
String.prototype.isShortDate = function()
{
var r = this.replace(/(^\s*)|(\s*$)/g, “”).match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);
if(r==null)
{
return false;
}
var d = new Date(r[1], r[3]-1, r[4]);
return (d.getFullYear()==r[1]&amp;&amp;(d.getMonth()+1)==r[3]&amp;&amp;d.getDate()==r[4]);
}
</p>

<p>
是否是正确的日期
String.prototype.isDate = function()
{
return this.isLongDate()||this.isShortDate();
}
</p>

<p>
是否是手机
String.prototype.isMobile = function()
{
return /^0{0,1}13[0-9]{9}$/.test(this);
}
</p>

<p>
是否是邮件
String.prototype.isEmail = function()
{
return /^\w+<sup><a href="#fn__1" id="fnt__1" class="fn_top">1)</a></sup>*\@[A-Za-z0-9]+<sup><a href="#fn__2" id="fnt__2" class="fn_top">2)</a></sup>]==null)
{
return false;
}
</p>

<p>
var sBirthday=sId.substr(6,4)+”-“+Number(sId.substr(10,2))+”-“+Number(sId.substr(12,2));
</p>

<p>
var d=new Date(sBirthday.replace(/-/g,”/“))
</p>

<p>
<em>非法生日
if(sBirthday!=(d.getFullYear()+”-“+ (d.getMonth()+1) + ”-“ + d.getDate()))
{
return false;
}
for(var i = 17;i&gt;=0;i–)
{
iSum += (Math.pow(2,i) % 11) * parseInt(sId.charAt(17 - i),11);
}

if(iSum%11!=1)
{
return false;
}
return true;

}

是否是有效的电话号码(中国)
String.prototype.isPhoneCall = function()
{
return /(^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)/.test(this);
}

是否是数字
String.prototype.isNumeric = function(flag)
{
</em>验证是否是数字
if(isNaN(this))
{
</p>

<p>
return false;
}
</p>

<p>
switch(flag)
{
</p>

<p>
case null:        <em>数字
case ”“:
return true;
case ”+“:        </em>正数
return                /(^\+?|^\d?)\d*\.?\d+$/.test(this);
case ”-“:        <em>负数
return                /^-\d*\.?\d+$/.test(this);
case “i”:        </em>整数
return                /(^-?|^\+?|\d)\d+$/.test(this);
case ”+i“:        <em>正整数
return                /(^\d+$)|(^\+?\d+$)/.test(this);                       
case ”-i“:        </em>负整数
return                /^[-]\d+$/.test(this);
case “f”:        <em>浮点数
return                /(^-?|^\+?|^\d?)\d*\.\d+$/.test(this);
case ”+f“:        </em>正浮点数
return                /(^\+?|^\d?)\d*\.\d+$/.test(this);                       
case ”-f“:        <em>负浮点数
return                /^[-]\d*\.\d$/.test(this);               
default:        </em>缺省
return true;                       
}
}
</p>

<p>
是否是颜色(#FFFFFF形式)
String.prototype.IsColor = function()
{
var temp        = this;
if (temp==”“) return true;
if (temp.length!=7) return false;
return (temp.search(/\#[a-fA-F0-9]{6}/) != -1);
}
</p>

<p>
转换成全角
String.prototype.toCase = function()
{
var tmp = ”“;
for(var i=0;i&lt;this.length;i++)
{
if(this.charCodeAt(i)&gt;0&amp;&amp;this.charCodeAt(i)&lt;255)
{
tmp += String.fromCharCode(this.charCodeAt(i)+65248);
}
else
{
tmp += String.fromCharCode(this.charCodeAt(i));
}
}
return tmp
}
</p>

<p>
对字符串进行Html编码
String.prototype.toHtmlEncode = function()
{
var str = this;
</p>

<p>
str=str.replace(/&amp;/g,”&amp;amp;“);
str=str.replace(/&lt;/g,”&amp;lt;“);
str=str.replace(/&gt;/g,”&amp;gt;“);
str=str.replace(/\&#039;/g,”&amp;apos;“);
str=str.replace(/\”/g,“&amp;quot;”);
str=str.replace(/\n/g,“&lt;br&gt;”);
str=str.replace(/\ /g,“&amp;nbsp;”);
str=str.replace(/\t/g,“&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;”);
</p>

<p>
return str;
}
</p>

<p>
转换成日期
String.prototype.toDate = function()
{
try
{
return new Date(this.replace(/-/g, “\/”));
}
catch(e)
{
return null;
}
} 
</p>
<div class="footnotes">
<div class="fn"><sup><a href="#fnt__1" id="fn__1" class="fn_bot">1)</a></sup> 
-\w+)|(\.\w+</div>
<div class="fn"><sup><a href="#fnt__2" id="fn__2" class="fn_bot">2)</a></sup> 
\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(this);
}

是否是邮编(中国)
String.prototype.isZipCode = function()
{
return /^[\\d]{6}$/.test(this);
}

是否是有汉字
String.prototype.existChinese = function()
{
<em>[\u4E00-\u9FA5]為漢字﹐[\uFE30-\uFFA0]為全角符號
return /^[\x00-\xff]*$/.test(this);
}

是否是合法的文件名/目录名
String.prototype.isFileName = function()
{
return !/[\\\/\*\?\|:“&lt;&gt;]/g.test(this);
}

是否是有效链接
String.prototype.isUrl = function()
{
return /^http[s]?:\/\/([\w-]+\.)+[\w-]+([\w-./?%&amp;=]*)?$/i.test(this);
}

是否是有效的身份证(中国)
String.prototype.isIDCard = function()
{
var iSum=0;
var info=”“;
var sId = this;

 var aCity={11:“北京”,12:“天津”,13:“河北”,14:“山西”,15:“内蒙古”,21:“辽宁”,22:“吉林”,23:“黑龙 江”,31:“上海”,32:“江苏”,33:“浙江”,34:“安徽

”,35:“福建”,36:“江西”,37:“山东”,41:“河南”,42:“湖 北”,43:“湖南”,44:“广东”,45:“广西”,46:“海南”,50:“重庆”,51:“四川”,52:“贵州”,53:“云

南”,54:“西藏”,61:“陕西”,62:“甘肃”,63:“青海”,64:“宁夏”,65:“新疆”,71:“台湾”,81:“香港”,82:“澳门”,91:“国外”};

if(!/^\d{17}(\d|x)$/i.test(sId))
{
return false;
}
sId=sId.replace(/x$/i,”a“);
</em>非法地区
if(aCity[parseInt(sId.substr(0,2</div>
</div>
